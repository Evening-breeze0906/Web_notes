// JavaScript笔记


// 1.运算符
/* 运算符也叫操作符
    通过运算符可以对一个或多个值进行运算,并获取运算结果
    比如：typeof就是运算符，可以来获得一个值的类型
        它会将该值的类型以字符串的形式返回
        number string boolean undefined object */
/* 算数运算符
    当对非Number类型的值进行运算时，会将这些值转换为Number然后在运算
    任何值和NaN做运算都得NaN */
    // 加法拼串转String
    var a;
    a=15+"";
    console.log(typeof a);
    var b;
    b=""-4;
    console.log(typeof b);


// 2.一元运算符
/* 一元运算符，只需要一个操作数
    对于非Number类型的值，
    它会将先转换为Number，然后再运算
    可以对一个其他的数据类型使用+,来将其转换为number
    它的原理和Number()函数一样 */
    var c;
    c="27";
    c=-c;
    console.log(c);
    console.log(typeof c);


// 3.逻辑运算符
/*
* && || 非布尔值的情况
* 	- 对于非布尔值进行与或运算时，
* 		会先将其转换为布尔值，然后再运算，并且返回原值
* 	- 与运算：
* 		- 如果第一个值为true，则必然返回第二个值
* 		- 如果第一个值为false，则直接返回第一个值
* 	- 或运算相反
*/


// 4.关系运算符
/* 通过关系运算符可以比较两个值之间的大小关系，
如果关系成立它会返回true，如果关系不成立则返回false

非数值的情况
    - 对于非数值进行比较时，会将其转换为数字然后再比较
    - 如果符号两侧的值都是字符串时，不会将其转换为数字进行比较
        而会分别比较字符串中字符的Unicode编码，逐位比较
        注意：在比较两个字符串型的数字时，务必要转型 */


// 5.相等运算符
/* ==相等
    如果值的类型不同，则会自动类型转换，转换成相同的类型，然后再比较
    !=不相等 类似
    
    ==全等、!==不全等 不做自动类型转换 */
/*
* undefined 衍生自 null
* 	所以这两个值做相等判断时，会返回true
*/
console.log(undefined == null);
/*
* NaN不和任何值相等，包括他本身
*/
console.log(NaN == NaN); //false

// 可以通过isNaN()函数来判断一个值是否是NaN
console.log(isNan(a));


// 6.条件运算符
// 如果条件的表达式的求值结果是一个非布尔值，会将其转换为布尔值然后在运算